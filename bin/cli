#!/usr/bin/env bash
# This script was generated by bashly 1.1.9 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
cli_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli - CLI for PDF Form Filling API\n"
    echo

  else
    printf "cli - CLI for PDF Form Filling API\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli COMMAND\n"
  printf "  cli [COMMAND] --help | -h\n"
  printf "  cli --version | -v\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   manage docker containers\n" "container"
  printf "  %s   manage postgresql database\n" "database "
  printf "  %s   manage certbot SSL\n" "cert     "
  printf "  %s   install composer dependencies\n" "install  "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "APP_ENV (required)"
    printf "    Set your environment\n"
    echo

  fi
}

# :command.usage
cli_container_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli container - manage docker containers\n"
    echo

  else
    printf "cli container - manage docker containers\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli container COMMAND\n"
  printf "  cli container [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   build docker containers\n" "build  "
  printf "  %s   start docker containers\n" "start  "
  printf "  %s   stop docker containers\n" "stop   "
  printf "  %s   restart docker containers\n" "restart"
  printf "  %s   log docker containers\n" "logs   "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_container_build_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli container build - build docker containers\n"
    echo

  else
    printf "cli container build - build docker containers\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli container build\n"
  printf "  cli container build --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_container_start_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli container start - start docker containers\n"
    echo

  else
    printf "cli container start - start docker containers\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli container start\n"
  printf "  cli container start --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_container_stop_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli container stop - stop docker containers\n"
    echo

  else
    printf "cli container stop - stop docker containers\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli container stop\n"
  printf "  cli container stop --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_container_restart_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli container restart - restart docker containers\n"
    echo

  else
    printf "cli container restart - restart docker containers\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli container restart\n"
  printf "  cli container restart --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_container_logs_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli container logs - log docker containers\n"
    echo

  else
    printf "cli container logs - log docker containers\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli container logs\n"
  printf "  cli container logs --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_database_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli database - manage postgresql database\n"
    echo

  else
    printf "cli database - manage postgresql database\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli database COMMAND\n"
  printf "  cli database [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   migrate database\n" "migrate"
  printf "  %s   seed database\n" "seed   "
  printf "  %s   reset database\n" "reset  "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_database_migrate_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli database migrate - migrate database\n"
    echo

  else
    printf "cli database migrate - migrate database\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli database migrate\n"
  printf "  cli database migrate --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_database_seed_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli database seed - seed database\n"
    echo

  else
    printf "cli database seed - seed database\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli database seed\n"
  printf "  cli database seed --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_database_reset_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli database reset - reset database\n"
    echo

  else
    printf "cli database reset - reset database\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli database reset\n"
  printf "  cli database reset --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_cert_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli cert - manage certbot SSL\n"
    echo

  else
    printf "cli cert - manage certbot SSL\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli cert COMMAND\n"
  printf "  cli cert [COMMAND] --help | -h\n"
  echo
  # :command.usage_commands
  printf "%s\n" "Commands:"
  printf "  %s   create new certificate\n" "create"
  printf "  %s   renew available certificate\n" "renew "
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_cert_create_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli cert create - create new certificate\n"
    echo

  else
    printf "cli cert create - create new certificate\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli cert create [OPTIONS]\n"
  printf "  cli cert create --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--domain, -d DOMAIN"
    printf "    Domain name to use for certificate request\n"
    printf "    Default: 143.198.242.211.sslip.io\n"
    echo

    # :flag.usage
    printf "  %s\n" "--run"
    printf "    Actually run\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "SSL_DOMAIN (required)"
    printf "    Domain to be used for certificate creation\n"
    echo

  fi
}

# :command.usage
cli_cert_renew_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli cert renew - renew available certificate\n"
    echo

  else
    printf "cli cert renew - renew available certificate\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli cert renew\n"
  printf "  cli cert renew --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.usage
cli_install_usage() {
  if [[ -n $long_usage ]]; then
    printf "cli install - install composer dependencies\n"
    echo

  else
    printf "cli install - install composer dependencies\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  cli install\n"
  printf "  cli install --help | -h\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo

  fi
}

# :command.normalize_input
normalize_input() {
  local arg flags

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.user_lib
# src/lib/colors.sh
print_in_color() {
  local color="$1"
  shift
  if [[ -z ${NO_COLOR+x} ]]; then
    printf "$color%b\e[0m\n" "$*"
  else
    printf "%b\n" "$*"
  fi
}

red() { print_in_color "\e[31m" "$*"; }
green() { print_in_color "\e[32m" "$*"; }
yellow() { print_in_color "\e[33m" "$*"; }
blue() { print_in_color "\e[34m" "$*"; }
magenta() { print_in_color "\e[35m" "$*"; }
cyan() { print_in_color "\e[36m" "$*"; }
bold() { print_in_color "\e[1m" "$*"; }
underlined() { print_in_color "\e[4m" "$*"; }
red_bold() { print_in_color "\e[1;31m" "$*"; }
green_bold() { print_in_color "\e[1;32m" "$*"; }
yellow_bold() { print_in_color "\e[1;33m" "$*"; }
blue_bold() { print_in_color "\e[1;34m" "$*"; }
magenta_bold() { print_in_color "\e[1;35m" "$*"; }
cyan_bold() { print_in_color "\e[1;36m" "$*"; }
red_underlined() { print_in_color "\e[4;31m" "$*"; }
green_underlined() { print_in_color "\e[4;32m" "$*"; }
yellow_underlined() { print_in_color "\e[4;33m" "$*"; }
blue_underlined() { print_in_color "\e[4;34m" "$*"; }
magenta_underlined() { print_in_color "\e[4;35m" "$*"; }
cyan_underlined() { print_in_color "\e[4;36m" "$*"; }

# :command.command_functions

# :command.function
cli_container_build_command() {
  # src/container_build_command.sh
  docker compose -f $APP_ROOT/compose.yml -f $APP_ROOT/compose.$APP_ENV.yml up --remove-orphans --build -d

}

# :command.function
cli_container_start_command() {
  # src/container_start_command.sh
  docker compose -f $APP_ROOT/compose.yml -f $APP_ROOT/compose.$APP_ENV.yml up -d

}

# :command.function
cli_container_stop_command() {
  # src/container_stop_command.sh
  docker compose -f $APP_ROOT/compose.yml -f $APP_ROOT/compose.$APP_ENV.yml down -d

}

# :command.function
cli_container_restart_command() {
  # src/container_restart_command.sh
  docker compose -f $APP_ROOT/compose.yml -f $APP_ROOT/compose.$APP_ENV.yml restart
}

# :command.function
cli_container_logs_command() {
  # src/container_logs_command.sh
  docker compose -f $APP_ROOT/compose.yml -f $APP_ROOT/compose.$APP_ENV.yml logs -f
}

# :command.function
cli_database_migrate_command() {
  # src/database_migrate_command.sh
  docker exec -it pff-api-php php vendor/bin/phinx migrate
}

# :command.function
cli_database_seed_command() {
  # src/database_seed_command.sh
  docker exec -it pff-api-php php vendor/bin/phinx seed:run
}

# :command.function
cli_database_reset_command() {
  # src/database_reset_command.sh
  docker exec -it pff-api-php php vendor/bin/phinx migrate -t 0
}

# :command.function
cli_cert_create_command() {
  # src/cert_create_command.sh
  echo "Creating certificate.."

  if [[ ${APP_ENV} == "dev" ]]; then
  error_msg "Creating certificate in environment 'dev' is not allowed."
  fi

  if [[ ${args[--run]} ]]
  then
      echo "[RUN]"
      docker compose -f $APP_ROOT/compose.yml -f $APP_ROOT/compose.$APP_ENV.yml run --rm certbot certonly --webroot -w /var/www/certbot/ -d $SSL_DOMAIN -d www.$SSL_DOMAIN --email $SSL_EMAIL --agree-tos --non-interactive

      cp -Lr .docker/certbot/conf/live/ .docker/nginx/ssl/
  else
      echo "[DRY RUN]"
      docker compose -f $APP_ROOT/compose.yml -f $APP_ROOT/compose.$APP_ENV.yml run --rm certbot certonly --webroot -w /var/www/certbot/ -d $SSL_DOMAIN -d www.$SSL_DOMAIN --email $SSL_EMAIL --agree-tos --non-interactive --dry-run
  fi
}

# :command.function
cli_cert_renew_command() {
  # src/cert_renew_command.sh
  echo "Renewing Certificate.."
  echo

  if [[ ${APP_ENV} == "dev" ]]; then
  error_msg "Renewing certificate in environment 'dev' is not allowed."
  fi

  docker compose -f $APP_ROOT/compose.yml -f $APP_ROOT/compose.$APP_ENV.yml run --rm certbot renew
}

# :command.function
cli_install_command() {
  # src/install_command.sh
  docker exec -it pff-api-php composer install
}

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        cli_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  env_var_names+=("APP_ENV")
  if [[ -z "${APP_ENV:-}" ]]; then
    printf "missing required environment variable: APP_ENV\n" >&2
    exit 1
  fi

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    container)
      action="container"
      shift
      cli_container_parse_requirements "$@"
      shift $#
      ;;

    database)
      action="database"
      shift
      cli_database_parse_requirements "$@"
      shift $#
      ;;

    cert)
      action="cert"
      shift
      cli_cert_parse_requirements "$@"
      shift $#
      ;;

    install)
      action="install"
      shift
      cli_install_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cli_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_container_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_container_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    build)
      action="build"
      shift
      cli_container_build_parse_requirements "$@"
      shift $#
      ;;

    start)
      action="start"
      shift
      cli_container_start_parse_requirements "$@"
      shift $#
      ;;

    stop)
      action="stop"
      shift
      cli_container_stop_parse_requirements "$@"
      shift $#
      ;;

    restart)
      action="restart"
      shift
      cli_container_restart_parse_requirements "$@"
      shift $#
      ;;

    logs)
      action="logs"
      shift
      cli_container_logs_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cli_container_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_container_build_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_container_build_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="container build"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_container_start_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_container_start_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="container start"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_container_stop_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_container_stop_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="container stop"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_container_restart_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_container_restart_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="container restart"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_container_logs_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_container_logs_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="container logs"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_database_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_database_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    migrate)
      action="migrate"
      shift
      cli_database_migrate_parse_requirements "$@"
      shift $#
      ;;

    seed)
      action="seed"
      shift
      cli_database_seed_parse_requirements "$@"
      shift $#
      ;;

    reset)
      action="reset"
      shift
      cli_database_reset_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cli_database_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_database_migrate_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_database_migrate_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="database migrate"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_database_seed_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_database_seed_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="database seed"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_database_reset_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_database_reset_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="database reset"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_cert_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_cert_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action=${1:-}

  case $action in
    -*) ;;

    create)
      action="create"
      shift
      cli_cert_create_parse_requirements "$@"
      shift $#
      ;;

    renew)
      action="renew"
      shift
      cli_cert_renew_parse_requirements "$@"
      shift $#
      ;;

    # :command.command_fallback
    "")
      cli_cert_usage >&2
      exit 1
      ;;

    *)
      printf "invalid command: %s\n" "$action" >&2
      exit 1
      ;;

  esac

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_cert_create_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_cert_create_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter

  env_var_names+=("SSL_DOMAIN")
  if [[ -z "${SSL_DOMAIN:-}" ]]; then
    printf "missing required environment variable: SSL_DOMAIN\n" >&2
    exit 1
  fi

  # :command.command_filter
  action="cert create"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --domain | -d)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--domain']="$2"
          shift
          shift
        else
          printf "%s\n" "--domain requires an argument: --domain, -d DOMAIN" >&2
          exit 1
        fi
        ;;

      # :flag.case
      --run)

        # :flag.case_no_arg
        args['--run']=1
        shift
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

  # :command.default_assignments
  [[ -n ${args['--domain']:-} ]] || args['--domain']="143.198.242.211.sslip.io"

}

# :command.parse_requirements
cli_cert_renew_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_cert_renew_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="cert renew"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.parse_requirements
cli_install_parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --help | -h)
        long_usage=yes
        cli_install_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.command_filter
  action="install"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # src/initialize.sh
  APP_ROOT="$(dirname "$(dirname "$(readlink -fm "$0")")")"

  SSL_EMAIL="pdf-api@swisstph.ch"

  error_msg(){ printf %s"\n$(red Error!)\n${1}\nExiting (1)\n\n"; exit 1; }

  if [[ "${APP_ENV}" == "dev" ]]; then

      printf "Detected 'development' environment."
  elif [[ "${APP_ENV}" == "test" ]]; then
      printf "Detected 'testing' environment."
  elif [[ "${APP_ENV}" == "prod" ]]; then
      printf "Detected 'production' environment."
  else
      error_msg "No valid environment detected: '${APP_ENV}'"
  fi
  echo

  # check if command cli cert create
  # if ! [[ -z "${SSL_DOMAIN}" ]]; then

  #     validate="^([a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9]\.)+[a-zA-Z]{2,}$"

  #     if ! [[ "${SSL_DOMAIN}" =~ $validate ]]; then
  #         error_msg "No valid domain name detected: '${SSL_DOMAIN}'"
  #     fi

  # fi
}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "container") cli_container_command ;;
    "container build") cli_container_build_command ;;
    "container start") cli_container_start_command ;;
    "container stop") cli_container_stop_command ;;
    "container restart") cli_container_restart_command ;;
    "container logs") cli_container_logs_command ;;
    "database") cli_database_command ;;
    "database migrate") cli_database_migrate_command ;;
    "database seed") cli_database_seed_command ;;
    "database reset") cli_database_reset_command ;;
    "cert") cli_cert_command ;;
    "cert create") cli_cert_create_command ;;
    "cert renew") cli_cert_renew_command ;;
    "install") cli_install_command ;;
  esac
}

initialize
run "$@"
